@using System.Net.Http
@inject HttpClient Http
@inject ILocalStorageService localStorage

@page "/spacex"

    <div class="container">
        <h1>SpaceX</h1>

        @if (Loading)
        {
            <h3>Loading...</h3>
        }
        else
        {
            <h4>@completedLaunchesCount successfull launches</h4>

            <div>
                <h3>Launches</h3>

                <button class="btn text-light m-1 @((VisibleLaunches == UpcomingLaunches && UpcomingLaunches != null) ? "btn-primary" : "")" @onclick="(() => VisibleLaunches = UpcomingLaunches)">Upcoming Launches</button>

                <button class="btn text-light m-1 @((VisibleLaunches == PastLaunches && PastLaunches != null) ? "btn-primary" : "")" @onclick="(() => VisibleLaunches = PastLaunches)">Past Launches</button>


                @if (!(UpcomingLaunches is null))
                {
                    foreach (SpacexLaunch launch in VisibleLaunches)
                    {
                        <div class="card-body m-1 background-medium rounded">
                            <h5 class="card-title">@launch.mission_name</h5>
                            <p class="card-text">
                                Launch Date: @launch.launch_date_utc.ToString("dddd, dd MMMM yyyy HH:mm:ss") UTC<br />
                                Vehicle: @launch.rocket.rocket_name<br />
                                @launch.details
                            </p>
                        </div>
                    }
                }

            </div>
        }
    </div>


@code {

    public const string LaunchesURI = "https://api.spacexdata.com/v3/launches";

    public static SpacexLaunch[] VisibleLaunches;
    public static SpacexLaunch[] PastLaunches;
    public static SpacexLaunch[] UpcomingLaunches;

    public static int completedLaunchesCount;

    public bool Loading = false;

    protected override async Task OnInitializedAsync()
    {
        if (UpcomingLaunches is null || PastLaunches is null)
        {
            // Show loading message
            Loading = true;

            System.Console.WriteLine("Requesting launch data from SpaceX Data API");
            SpacexLaunch[] launches = await Http.GetJsonAsync<SpacexLaunch[]>(LaunchesURI);
            System.Console.WriteLine("Received launch data from SpaceX Data API");

            PastLaunches = launches.Where(l => !l.upcoming).Reverse().ToArray();
            UpcomingLaunches = launches.Where(l => l.upcoming).ToArray();
            VisibleLaunches = UpcomingLaunches;

            // Count successful launches
            completedLaunchesCount = PastLaunches.Where(launch => launch.launch_success == true).Count();

            // Hide loading message
            Loading = false;
        }
    }

    public class SpacexLaunch
    {
        public string mission_name { get; set; }
        public string details { get; set; }
        public DateTime launch_date_utc { get; set; }
        public Rocket rocket { get; set; }
        public bool? launch_success { get; set; }
        public bool upcoming { get; set; }

        public class Rocket
        {
            public string rocket_name { get; set; }
        }
    }

}